{
  "name": "tooltip",
  "type": "registry:ui",
  "description": "A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.",
  "registryDependencies": [
    "https://shadcn-preact.regarde.dev/cn.json",
    "https://shadcn-preact.regarde.dev/portal.json",
    "https://shadcn-preact.regarde.dev/compose_ref.json",
    "https://shadcn-preact.regarde.dev/useId.json"
  ],
  "files": [
    {
      "path": "tooltip.tsx",
      "type": "registry:ui",
      "content": "import { autoUpdate, flip, offset, shift, useFloating } from \"@floating-ui/react-dom\";\nimport type { ButtonHTMLAttributes } from \"preact\";\nimport {\n  type HTMLAttributes,\n  type PropsWithChildren,\n  createContext,\n  forwardRef,\n  useEffect,\n  useRef,\n} from \"preact/compat\";\nimport { useContext } from \"preact/hooks\";\nimport { Portal } from \"./portal\";\nimport { cn } from \"./share/cn\";\nimport { useComposedRefs } from \"./share/compose_ref\";\nimport { Slot } from \"./share/slot\";\nimport { useControlledState } from \"./share/useControlledState\";\nimport { useId } from \"./share/useId\";\n\n// TooltipProvider Context\ntype TooltipProviderContextValue = {\n  delayDuration?: number;\n};\n\nconst TooltipProviderContext = createContext<TooltipProviderContextValue>({\n  delayDuration: 700,\n});\n\nexport type TooltipProviderProps = PropsWithChildren<{\n  delayDuration?: number;\n}>;\n\nexport const TooltipProvider = ({ children, delayDuration = 700 }: TooltipProviderProps) => (\n  <TooltipProviderContext.Provider value={{ delayDuration }}>{children}</TooltipProviderContext.Provider>\n);\n\n// Tooltip Context\ntype TooltipContextValue = {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  triggerRef: { current: HTMLElement | null };\n  delayDuration: number;\n  tooltipId: string;\n};\n\nconst TooltipContext = createContext<TooltipContextValue | null>(null);\n\nexport type TooltipProps = PropsWithChildren & {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  delayDuration?: number;\n};\n\nexport const Tooltip = ({\n  children,\n  open: controlledOpen,\n  defaultOpen = false,\n  onOpenChange,\n  delayDuration: tooltipDelayDuration,\n}: TooltipProps) => {\n  const providerContext = useContext(TooltipProviderContext);\n  const triggerRef = useRef<HTMLElement | null>(null);\n  const tooltipId = useId(\"tooltip\");\n\n  const [open, setOpen] = useControlledState({\n    defaultValue: defaultOpen,\n    controlledValue: controlledOpen,\n    onChange: onOpenChange,\n  });\n\n  const delayDuration = tooltipDelayDuration ?? providerContext.delayDuration ?? 700;\n\n  return (\n    <TooltipContext.Provider\n      value={{\n        open,\n        setOpen,\n        triggerRef,\n        delayDuration,\n        tooltipId,\n      }}\n    >\n      {children}\n    </TooltipContext.Provider>\n  );\n};\n\nfunction useTooltip() {\n  const context = useContext(TooltipContext);\n  if (!context) {\n    throw new Error(\"Tooltip components must be used within a Tooltip component\");\n  }\n  return context;\n}\n\n// TooltipTrigger\nexport type TooltipTriggerProps = PropsWithChildren &\n  ButtonHTMLAttributes<HTMLButtonElement> & {\n    asChild?: boolean;\n  };\n\nexport const TooltipTrigger = forwardRef<HTMLButtonElement, TooltipTriggerProps>(\n  ({ children, asChild = false, onMouseEnter, onMouseLeave, onFocus, onBlur, ...props }, forwardedRef) => {\n    const { open, setOpen, triggerRef, delayDuration, tooltipId } = useTooltip();\n    const timeoutRef = useRef<number>();\n\n    const handleMouseEnter = (e: MouseEvent) => {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = window.setTimeout(() => {\n        setOpen(true);\n      }, delayDuration);\n      onMouseEnter?.(e as any);\n    };\n\n    const handleMouseLeave = (e: MouseEvent) => {\n      clearTimeout(timeoutRef.current);\n      setOpen(false);\n      onMouseLeave?.(e as any);\n    };\n\n    const handleFocus = (e: FocusEvent) => {\n      clearTimeout(timeoutRef.current);\n      setOpen(true);\n      onFocus?.(e as any);\n    };\n\n    const handleBlur = (e: FocusEvent) => {\n      clearTimeout(timeoutRef.current);\n      setOpen(false);\n      onBlur?.(e as any);\n    };\n\n    useEffect(() => {\n      return () => {\n        clearTimeout(timeoutRef.current);\n      };\n    }, []);\n\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={(node: HTMLElement | null) => {\n          triggerRef.current = node;\n          if (typeof forwardedRef === \"function\") {\n            forwardedRef(node as any);\n          } else if (forwardedRef) {\n            (forwardedRef as any).current = node;\n          }\n        }}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        aria-describedby={open ? tooltipId : undefined}\n        data-state={open ? \"open\" : \"closed\"}\n        {...props}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\nTooltipTrigger.displayName = \"TooltipTrigger\";\n\n// TooltipContent\nexport type TooltipSide = \"top\" | \"right\" | \"bottom\" | \"left\";\n\nexport type TooltipContentProps = HTMLAttributes<HTMLDivElement> & {\n  side?: TooltipSide;\n  sideOffset?: number;\n};\n\nexport const TooltipContent = forwardRef<HTMLDivElement, TooltipContentProps>(\n  ({ className, class: classNative, side = \"top\", sideOffset = 4, children, ...props }, forwardedRef) => {\n    const { open, triggerRef, tooltipId } = useTooltip();\n    const contentRef = useRef<HTMLDivElement>(null);\n\n    const { refs, floatingStyles } = useFloating({\n      open,\n      strategy: \"fixed\",\n      placement: side,\n      middleware: [offset(sideOffset), flip(), shift({ padding: 8 })],\n      whileElementsMounted: autoUpdate,\n      transform: false,\n    });\n\n    // Connect the trigger ref to floating-ui\n    useEffect(() => {\n      if (triggerRef.current) {\n        refs.setReference(triggerRef.current);\n      }\n    }, [refs, triggerRef]);\n\n    const composedRefs = useComposedRefs(contentRef, forwardedRef as any, (node: HTMLDivElement | null) =>\n      refs.setFloating(node)\n    );\n\n    if (!open) return null;\n\n    return (\n      <Portal>\n        <div\n          ref={composedRefs}\n          id={tooltipId}\n          data-slot=\"tooltip-content\"\n          data-side={side}\n          data-state={open ? \"open\" : \"closed\"}\n          role=\"tooltip\"\n          style={floatingStyles}\n          className={cn(\n            \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-popover-foreground text-sm shadow-md\",\n            \"fade-in-0 zoom-in-95 animate-in data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=closed]:animate-out\",\n            className,\n            classNative\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </Portal>\n    );\n  }\n);\nTooltipContent.displayName = \"TooltipContent\";\n"
    }
  ],
  "category": "ui"
}
