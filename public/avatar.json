{
  "name": "avatar",
  "type": "registry:ui",
  "description": "An image element with a fallback for representing the user.",
  "registryDependencies": [
    "https://shadcn-preact.regarde.dev/cn.json"
  ],
  "files": [
    {
      "path": "avatar.tsx",
      "type": "registry:ui",
      "content": "import type { ImgHTMLAttributes } from \"preact\";\nimport {\n  type HTMLAttributes,\n  createContext,\n  forwardRef,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useState,\n} from \"preact/compat\";\nimport { cn } from \"./share/cn\";\n\nexport type ImageLoadingStatus = \"idle\" | \"loading\" | \"loaded\" | \"error\";\n\nexport const AvatarContext = createContext<{\n  status: ImageLoadingStatus;\n  changeStatus: (s: ImageLoadingStatus) => void;\n} | null>(null);\n\nexport type AvatarProps = HTMLAttributes<HTMLDivElement>;\n\nexport const Avatar = forwardRef<HTMLDivElement, AvatarProps>(({ className, class: classNative, ...props }, ref) => {\n  const [imgStatus, setImgStatus] = useState<ImageLoadingStatus>(\"idle\");\n\n  const changeImgStatus = (s: ImageLoadingStatus) => setImgStatus(s);\n\n  return (\n    <AvatarContext.Provider value={{ status: imgStatus, changeStatus: changeImgStatus }}>\n      <div\n        ref={ref}\n        data-slot=\"avatar\"\n        className={cn(\"relative flex size-8 shrink-0 overflow-hidden rounded-full\", className, classNative)}\n        {...props}\n      />\n    </AvatarContext.Provider>\n  );\n});\nAvatar.displayName = \"Avatar\";\n\nexport type AvatarImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  onLoadingStatusChange?: (status: ImageLoadingStatus) => void;\n};\n\nexport const AvatarImage = forwardRef<HTMLImageElement, AvatarImageProps>(\n  ({ onLoadingStatusChange, className, class: classNative, ...props }, ref) => {\n    const { status, changeStatus } = useAvatar();\n    const loadingStatus = useImageLoadingStatus(props.src as string, {\n      crossOrigin: props.crossOrigin,\n      referrerPolicy: props.crossOrigin as string,\n    });\n\n    useEffect(() => {\n      changeStatus(loadingStatus);\n      onLoadingStatusChange?.(loadingStatus);\n    }, [loadingStatus, changeStatus, onLoadingStatusChange]);\n\n    return status === \"loaded\" ? (\n      <img\n        ref={ref}\n        data-slot=\"avatar-image\"\n        className={cn(\"aspect-square size-full\", className, classNative)}\n        {...props}\n        alt={props.alt}\n      />\n    ) : null;\n  }\n);\nAvatarImage.displayName = \"AvatarImage\";\n\nexport type AvatarFallbackProps = HTMLAttributes<HTMLSpanElement> & {\n  delayMs?: number;\n};\n\nexport const AvatarFallback = forwardRef<HTMLSpanElement, AvatarFallbackProps>(\n  ({ delayMs, className, class: classNative, ...props }, ref) => {\n    const { status } = useAvatar();\n    const [canRender, setCanRender] = useState(delayMs === undefined);\n\n    useEffect(() => {\n      if (delayMs === undefined) return;\n\n      const timerId = setTimeout(() => setCanRender(true), delayMs);\n      return () => clearTimeout(timerId);\n    }, [delayMs]);\n\n    return canRender && status !== \"loaded\" ? (\n      <span\n        ref={ref}\n        data-slot=\"avatar-fallback\"\n        className={cn(\"flex size-full items-center justify-center rounded-full bg-muted\", className, classNative)}\n        {...props}\n      />\n    ) : null;\n  }\n);\nAvatarFallback.displayName = \"AvatarFallback\";\n\ntype useImageLoadingStatusOptions = {\n  referrerPolicy: string;\n  crossOrigin: ImgHTMLAttributes<HTMLImageElement>[\"crossOrigin\"];\n};\nexport function useImageLoadingStatus(\n  src: string | undefined,\n  { referrerPolicy, crossOrigin }: useImageLoadingStatusOptions\n) {\n  const [loadingStatus, setLoadingStatus] = useState<ImageLoadingStatus>(\"idle\");\n\n  useLayoutEffect(() => {\n    if (!src) {\n      setLoadingStatus(\"error\");\n      return;\n    }\n\n    let isMounted = true;\n    const image = new Image();\n\n    const updateStatus = (status: ImageLoadingStatus) => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n\n    setLoadingStatus(\"loading\");\n\n    image.onload = updateStatus(\"loaded\");\n    image.onerror = updateStatus(\"error\");\n\n    if (referrerPolicy) {\n      image.referrerPolicy = referrerPolicy;\n    }\n\n    if (typeof crossOrigin === \"string\") {\n      image.crossOrigin = crossOrigin;\n    }\n\n    image.src = src;\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src, referrerPolicy, crossOrigin]);\n\n  return loadingStatus;\n}\n\nexport function useAvatar() {\n  const c = useContext(AvatarContext);\n  if (!c) throw new Error(\"useAvatar should be used inside of an AvatarContextProvider\");\n  return c;\n}\n"
    }
  ],
  "category": "ui"
}
