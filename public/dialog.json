{
  "name": "dialog",
  "type": "registry:ui",
  "description": "A window overlaid on either the primary window or another dialog window.",
  "dependencies": [
    "lucide-preact"
  ],
  "registryDependencies": [
    "https://shadcn-preact.regarde.dev/cn.json",
    "https://shadcn-preact.regarde.dev/slot.json",
    "https://shadcn-preact.regarde.dev/modal.json",
    "https://shadcn-preact.regarde.dev/show.json",
    "https://shadcn-preact.regarde.dev/compose_ref.json",
    "https://shadcn-preact.regarde.dev/useControlledState.json",
    "https://shadcn-preact.regarde.dev/useEscapeKeyDown.json",
    "https://shadcn-preact.regarde.dev/useFocusTrap.json",
    "https://shadcn-preact.regarde.dev/useId.json"
  ],
  "files": [
    {
      "path": "dialog.tsx",
      "type": "registry:ui",
      "content": "import { X } from \"lucide-preact\";\nimport type { ButtonHTMLAttributes } from \"preact\";\nimport { type HTMLAttributes, type PropsWithChildren, createContext, createRef, forwardRef } from \"preact/compat\";\nimport { useContext, useEffect, useRef } from \"preact/hooks\";\nimport { Modal } from \"./modal\";\nimport { cn } from \"./share/cn\";\nimport { useComposedRefs } from \"./share/compose_ref\";\nimport { Slot } from \"./share/slot\";\nimport { useControlledState } from \"./share/useControlledState\";\nimport { useEscapeKeyDown } from \"./share/useEscapeKeyDown\";\nimport { useFocusTrap } from \"./share/useFocusTrap\";\nimport { useId } from \"./share/useId\";\nimport { Show } from \"./show\";\n\nconst DialogContext = createContext<{\n  open: boolean;\n  defaultOpen?: boolean;\n  openDialog: () => void;\n  closeDialog: () => void;\n  triggerRef: { current: HTMLElement | null };\n  titleId: string;\n  descriptionId: string;\n} | null>(null);\n\nexport type DialogProviderProps = PropsWithChildren & {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onChange?: (open: boolean) => void;\n};\n\nexport const Dialog = ({ open: controlledOpen, defaultOpen, children, onChange }: DialogProviderProps) => {\n  const triggerRef = useRef<HTMLElement | null>(null);\n  const titleId = useId(\"dialog-title\");\n  const descriptionId = useId(\"dialog-description\");\n\n  const [open, setOpen] = useControlledState({\n    defaultValue: Boolean(defaultOpen),\n    controlledValue: controlledOpen,\n    onChange: onChange,\n  });\n\n  return (\n    <DialogContext.Provider\n      value={{\n        open,\n        closeDialog: () => {\n          setOpen(false);\n        },\n        openDialog: () => {\n          setOpen(true);\n        },\n        defaultOpen,\n        triggerRef,\n        titleId,\n        descriptionId,\n      }}\n    >\n      {children}\n    </DialogContext.Provider>\n  );\n};\n\nexport function useDialog() {\n  const c = useContext(DialogContext);\n  if (!c) throw new Error(\"useDialog should be used within DialogProvider\");\n  return c;\n}\n\nexport type DialogTriggerProps = PropsWithChildren & { asChild?: boolean } & ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const DialogTrigger = forwardRef<HTMLButtonElement, DialogTriggerProps>(\n  ({ children, asChild, ...props }, forwardedRef) => {\n    const { openDialog, triggerRef } = useDialog();\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={(node: HTMLElement | null) => {\n          triggerRef.current = node;\n          if (typeof forwardedRef === \"function\") {\n            forwardedRef(node as any);\n          } else if (forwardedRef) {\n            (forwardedRef as any).current = node;\n          }\n        }}\n        onClick={openDialog}\n        {...props}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\n\nexport type DialogContentProps = HTMLAttributes<HTMLDivElement> & { autoSelect?: boolean };\n\nexport const DialogContent = forwardRef<HTMLDivElement, DialogContentProps>(\n  ({ className, class: classNative, children, ...props }, forwardedRef) => {\n    const { open, closeDialog, triggerRef, titleId, descriptionId } = useDialog();\n    const contentRef = createRef<HTMLDivElement>();\n\n    const compose_refs = useComposedRefs(contentRef, forwardedRef);\n\n    // Auto-focus first input when dialog opens\n    useEffect(() => {\n      if (open) {\n        if (props.autoSelect) {\n          contentRef.current?.parentElement?.querySelectorAll(\"input\")[0]?.select();\n        } else {\n          contentRef.current?.parentElement?.querySelectorAll(\"input\")[0]?.focus();\n        }\n      }\n    }, [open, contentRef.current]);\n\n    // Escape key handler with focus restoration\n    useEscapeKeyDown(closeDialog, {\n      enabled: open,\n      restoreFocus: triggerRef,\n    });\n\n    // Focus trap\n    useFocusTrap(contentRef, {\n      enabled: open,\n      restoreFocus: false, // We handle this manually with triggerRef\n    });\n\n    return (\n      <Show when={open}>\n        <Modal onClose={closeDialog}>\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n            <div\n              ref={compose_refs}\n              role=\"dialog\"\n              aria-modal=\"true\"\n              aria-labelledby={titleId}\n              aria-describedby={descriptionId}\n              data-slot=\"dialog-content\"\n              onMouseDown={(e) => e.stopPropagation()}\n              className={cn(\n                \"relative grid w-full max-w-lg gap-4 border bg-background p-6 shadow-lg duration-200 sm:rounded-lg\",\n                className,\n                classNative\n              )}\n              {...props}\n            >\n              <button\n                onClick={closeDialog}\n                type=\"button\"\n                className=\"absolute top-4 right-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\n              >\n                <X className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Close</span>\n              </button>\n              {children}\n            </div>\n          </div>\n        </Modal>\n      </Show>\n    );\n  }\n);\nDialogContent.displayName = \"DialogContent\";\n\nexport type DialogHeaderProps = HTMLAttributes<HTMLDivElement>;\n\nexport const DialogHeader = forwardRef<HTMLDivElement, DialogHeaderProps>(\n  ({ className, class: classNative, ...props }, forwardedRef) => (\n    <div\n      ref={forwardedRef}\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className, classNative)}\n      {...props}\n    />\n  )\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nexport type DialogFooterProps = HTMLAttributes<HTMLDivElement>;\n\nexport const DialogFooter = forwardRef<HTMLDivElement, DialogFooterProps>(\n  ({ className, class: classNative, ...props }, forwardedRef) => (\n    <div\n      ref={forwardedRef}\n      data-slot=\"dialog-footer\"\n      className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className, classNative)}\n      {...props}\n    />\n  )\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nexport type DialogTitleProps = HTMLAttributes<HTMLDivElement>;\n\nexport const DialogTitle = forwardRef<HTMLDivElement, DialogTitleProps>(\n  ({ className, class: classNative, ...props }, forwardedRef) => {\n    const { titleId } = useDialog();\n    return (\n      <div\n        ref={forwardedRef}\n        id={titleId}\n        role=\"heading\"\n        aria-level={2}\n        data-slot=\"dialog-title\"\n        className={cn(\"font-semibold text-lg leading-none tracking-tight\", className, classNative)}\n        {...props}\n      />\n    );\n  }\n);\nDialogTitle.displayName = \"DialogTitle\";\n\nexport type DialogDescriptionProps = HTMLAttributes<HTMLDivElement>;\n\nexport const DialogDescription = forwardRef<HTMLDivElement, DialogDescriptionProps>(\n  ({ className, class: classNative, ...props }, forwardedRef) => {\n    const { descriptionId } = useDialog();\n    return (\n      <div\n        ref={forwardedRef}\n        id={descriptionId}\n        data-slot=\"dialog-description\"\n        className={cn(\"text-muted-foreground text-sm\", className, classNative)}\n        {...props}\n      />\n    );\n  }\n);\nDialogDescription.displayName = \"DialogDescription\";\n\nexport type DialogCloseProps = ButtonHTMLAttributes<HTMLButtonElement> &\n  PropsWithChildren & { onCancel?: () => void; asChild?: boolean };\n\nexport const DialogClose = forwardRef<HTMLButtonElement, DialogCloseProps>(\n  ({ children, onCancel, asChild, ...props }, forwardedRef) => {\n    const { closeDialog } = useDialog();\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={forwardedRef}\n        onClick={() => {\n          closeDialog();\n          onCancel?.();\n        }}\n        {...props}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\nDialogClose.displayName = \"DialogClose\";\n"
    }
  ],
  "category": "ui"
}
