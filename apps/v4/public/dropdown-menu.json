{
  "name": "dropdown-menu",
  "type": "registry:ui",
  "description": "Displays a menu to the user — such as a set of actions or functions — triggered by a button.",
  "dependencies": [
    "lucide-preact"
  ],
  "registryDependencies": [
    "https://shadcn-preact.regarde.dev/cn.json",
    "https://shadcn-preact.regarde.dev/slot.json",
    "https://shadcn-preact.regarde.dev/portal.json",
    "https://shadcn-preact.regarde.dev/compose_ref.json",
    "https://shadcn-preact.regarde.dev/useControlledState.json",
    "https://shadcn-preact.regarde.dev/useEscapeKeyDown.json",
    "https://shadcn-preact.regarde.dev/useClickOutside.json",
    "https://shadcn-preact.regarde.dev/useArrowKeyNavigation.json",
    "https://shadcn-preact.regarde.dev/useId.json"
  ],
  "files": [
    {
      "path": "dropdown-menu.tsx",
      "type": "registry:ui",
      "content": "import { autoUpdate, flip, offset, shift, useFloating, type Placement } from \"@floating-ui/react-dom\";\nimport { Check, Circle } from \"lucide-preact\";\nimport type { ButtonHTMLAttributes, HTMLAttributes } from \"preact\";\nimport { createContext, forwardRef, useEffect, useMemo, useRef, useState, type PropsWithChildren } from \"preact/compat\";\nimport { useContext } from \"preact/hooks\";\nimport { Portal } from \"./portal\";\nimport { cn } from \"./share/cn\";\nimport { useComposedRefs } from \"./share/compose_ref\";\nimport { Slot } from \"./share/slot\";\nimport { useArrowKeyNavigation } from \"./share/useArrowKeyNavigation\";\nimport { useClickOutside } from \"./share/useClickOutside\";\nimport { useControlledState } from \"./share/useControlledState\";\nimport { useEscapeKeyDown } from \"./share/useEscapeKeyDown\";\n\n// DropdownMenu Context\ntype DropdownMenuContextValue = {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  triggerRef: { current: HTMLElement | null };\n};\n\nconst DropdownMenuContext = createContext<DropdownMenuContextValue | null>(null);\n\nexport type DropdownMenuProps = PropsWithChildren & {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n};\n\nexport const DropdownMenu = ({\n  children,\n  open: controlledOpen,\n  defaultOpen = false,\n  onOpenChange,\n}: DropdownMenuProps) => {\n  const triggerRef = useRef<HTMLElement | null>(null);\n\n  const [open, setOpen] = useControlledState({\n    defaultValue: defaultOpen,\n    controlledValue: controlledOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <DropdownMenuContext.Provider\n      value={{\n        open,\n        setOpen,\n        triggerRef,\n      }}\n    >\n      {children}\n    </DropdownMenuContext.Provider>\n  );\n};\n\nfunction useDropdownMenu() {\n  const context = useContext(DropdownMenuContext);\n  if (!context) {\n    throw new Error(\"DropdownMenu components must be used within a DropdownMenu component\");\n  }\n  return context;\n}\n\n// DropdownMenuTrigger\nexport type DropdownMenuTriggerProps = PropsWithChildren &\n  ButtonHTMLAttributes<HTMLButtonElement> & {\n    asChild?: boolean;\n  };\n\nexport const DropdownMenuTrigger = forwardRef<HTMLButtonElement, DropdownMenuTriggerProps>(\n  ({ children, asChild = false, onClick, ...props }, forwardedRef) => {\n    const { open, setOpen, triggerRef } = useDropdownMenu();\n\n    const composedRefs = useComposedRefs(triggerRef as any, forwardedRef as any);\n\n    const handleClick = (e: MouseEvent) => {\n      setOpen(!open);\n      onClick?.(e as any);\n    };\n\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={composedRefs}\n        type={asChild ? undefined : \"button\"}\n        onClick={handleClick}\n        aria-haspopup=\"menu\"\n        aria-expanded={open}\n        aria-controls=\"dropdown-menu-content\"\n        data-slot=\"dropdown-menu-trigger\"\n        data-state={open ? \"open\" : \"closed\"}\n        {...props}\n      >\n        {children}\n      </Comp>\n    );\n  }\n);\nDropdownMenuTrigger.displayName = \"DropdownMenuTrigger\";\n\n// DropdownMenuContent\nexport type DropdownMenuSide = \"top\" | \"right\" | \"bottom\" | \"left\";\nexport type DropdownMenuAlign = \"start\" | \"center\" | \"end\";\n\nexport type DropdownMenuContentProps = HTMLAttributes<HTMLDivElement> & {\n  side?: DropdownMenuSide;\n  sideOffset?: number;\n  align?: DropdownMenuAlign;\n  alignOffset?: number;\n};\n\nexport const DropdownMenuContent = forwardRef<HTMLDivElement, DropdownMenuContentProps>(\n  (\n    {\n      className,\n      class: classNative,\n      side = \"bottom\",\n      sideOffset = 4,\n      align = \"start\",\n      alignOffset = 0,\n      children,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    const { open, setOpen, triggerRef } = useDropdownMenu();\n    const contentRef = useRef<HTMLDivElement>(null);\n\n    // Build placement based on side and align\n    const placement = useMemo((): Placement => {\n      if (align === \"center\" || align === \"start\") {\n        if (side === \"bottom\" || side === \"top\") {\n          return align === \"start\" ? `${side}-start` : side;\n        }\n        return align === \"start\" ? `${side}-start` : side;\n      }\n      return `${side}-end` as Placement;\n    }, [side, align]);\n\n    // Build fallback placements for flip middleware\n    const fallbackPlacements = useMemo((): Placement[] => {\n      const fallbacks: Placement[] = [];\n\n      if (side === \"bottom\" || side === \"top\") {\n        const oppositeSide = side === \"bottom\" ? \"top\" : \"bottom\";\n        if (align === \"start\") {\n          fallbacks.push(`${oppositeSide}-start`);\n        } else if (align === \"end\") {\n          fallbacks.push(`${oppositeSide}-end`);\n        } else {\n          fallbacks.push(oppositeSide);\n        }\n      } else {\n        const oppositeSide = side === \"left\" ? \"right\" : \"left\";\n        if (align === \"start\") {\n          fallbacks.push(`${oppositeSide}-start`);\n        } else if (align === \"end\") {\n          fallbacks.push(`${oppositeSide}-end`);\n        } else {\n          fallbacks.push(oppositeSide);\n        }\n      }\n\n      return fallbacks;\n    }, [side, align]);\n\n    const {\n      refs,\n      floatingStyles,\n      placement: currentPlacement,\n    } = useFloating({\n      open,\n      strategy: \"fixed\",\n      placement: placement,\n      middleware: [\n        offset(sideOffset + alignOffset),\n        flip({\n          fallbackPlacements: fallbackPlacements,\n        }),\n        shift(),\n      ],\n      whileElementsMounted: autoUpdate,\n      transform: false,\n    });\n\n    const [maxHeight, setMaxHeight] = useState<number | undefined>();\n\n    // Connect the trigger ref to floating-ui\n    useEffect(() => {\n      if (triggerRef.current) {\n        refs.setReference(triggerRef.current);\n      }\n    }, [refs, triggerRef]);\n\n    useEffect(() => {\n      if (!open || !refs.floating.current || !refs.reference.current) {\n        setMaxHeight(undefined);\n        return;\n      }\n\n      const calculateMaxHeight = () => {\n        const referenceRect = refs.reference.current!.getBoundingClientRect();\n        const viewportHeight = window.innerHeight;\n        const viewportPadding = 8;\n\n        const actualPlacement = currentPlacement || placement;\n        const isVertical = actualPlacement.startsWith(\"top\") || actualPlacement.startsWith(\"bottom\");\n\n        let availableSpace: number;\n\n        if (isVertical) {\n          if (actualPlacement.startsWith(\"bottom\")) {\n            availableSpace = viewportHeight - referenceRect.bottom - viewportPadding - sideOffset;\n          } else {\n            availableSpace = referenceRect.top - viewportPadding - sideOffset;\n          }\n        } else {\n          // For left/right placements, use full viewport height minus padding\n          // (dropdown extends vertically regardless of horizontal placement)\n          const spaceAbove = referenceRect.top - viewportPadding;\n          const spaceBelow = viewportHeight - referenceRect.bottom - viewportPadding;\n          availableSpace = Math.max(spaceAbove, spaceBelow, viewportHeight - viewportPadding * 2);\n        }\n\n        const cappedHeight = Math.max(100, Math.min(availableSpace, 384));\n        setMaxHeight(cappedHeight);\n      };\n\n      calculateMaxHeight();\n    }, [open, refs, currentPlacement, placement, sideOffset]);\n\n    const composedRefs = useComposedRefs(contentRef, forwardedRef as any, (node: HTMLDivElement | null) =>\n      refs.setFloating(node)\n    );\n\n    // Handle escape key with focus restoration\n    useEscapeKeyDown(() => setOpen(false), {\n      enabled: open,\n      restoreFocus: triggerRef as any,\n    });\n\n    // Handle click outside\n    useClickOutside([contentRef, triggerRef as any], () => setOpen(false), {\n      enabled: open,\n    });\n\n    // Handle arrow key navigation\n    useArrowKeyNavigation(contentRef, {\n      enabled: open,\n      selector:\n        '[role=\"menuitem\"]:not([data-disabled=\"true\"]), [role=\"menuitemcheckbox\"]:not([data-disabled=\"true\"]), [role=\"menuitemradio\"]:not([data-disabled=\"true\"])',\n      onSelect: (_index, element) => element.click(),\n    });\n\n    if (!open) return null;\n\n    return (\n      <Portal>\n        <div\n          ref={composedRefs}\n          id=\"dropdown-menu-content\"\n          data-slot=\"dropdown-menu-content\"\n          data-side={side}\n          data-align={align}\n          data-state={open ? \"open\" : \"closed\"}\n          role=\"menu\"\n          tabIndex={-1}\n          style={{\n            ...floatingStyles,\n            maxHeight: maxHeight ? `${maxHeight}px` : undefined,\n          }}\n          className={cn(\n            \"z-50 min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n            \"fade-in-0 zoom-in-95 animate-in data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=closed]:animate-out\",\n            className,\n            classNative\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </Portal>\n    );\n  }\n);\nDropdownMenuContent.displayName = \"DropdownMenuContent\";\n\n// DropdownMenuItem\nexport type DropdownMenuItemProps = HTMLAttributes<HTMLDivElement> & {\n  inset?: boolean;\n  disabled?: boolean;\n};\n\nexport const DropdownMenuItem = forwardRef<HTMLDivElement, DropdownMenuItemProps>(\n  ({ className, class: classNative, inset, disabled, onClick, onMouseEnter, ...props }, forwardedRef) => {\n    const { setOpen } = useDropdownMenu();\n    const itemRef = useRef<HTMLDivElement>(null);\n\n    const composedRefs = useComposedRefs(itemRef, forwardedRef as any);\n\n    const handleClick = (e: MouseEvent) => {\n      if (disabled) return;\n      onClick?.(e as any);\n      setOpen(false);\n    };\n\n    const handleMouseEnter = (e: MouseEvent) => {\n      if (disabled) return;\n      itemRef.current?.focus();\n      onMouseEnter?.(e as any);\n    };\n\n    return (\n      <div\n        ref={composedRefs}\n        data-slot=\"dropdown-menu-item\"\n        data-disabled={disabled ? \"true\" : undefined}\n        role=\"menuitem\"\n        tabIndex={disabled ? -1 : 0}\n        className={cn(\n          \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors\",\n          \"focus:bg-accent focus:text-accent-foreground\",\n          \"data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n          \"[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n          inset && \"pl-8\",\n          className,\n          classNative\n        )}\n        onClick={handleClick}\n        onMouseEnter={handleMouseEnter}\n        {...props}\n      />\n    );\n  }\n);\nDropdownMenuItem.displayName = \"DropdownMenuItem\";\n\n// DropdownMenuCheckboxItem\nexport type DropdownMenuCheckboxItemProps = HTMLAttributes<HTMLDivElement> & {\n  checked?: boolean;\n  onCheckedChange?: (checked: boolean) => void;\n  disabled?: boolean;\n};\n\nexport const DropdownMenuCheckboxItem = forwardRef<HTMLDivElement, DropdownMenuCheckboxItemProps>(\n  (\n    { className, class: classNative, checked, onCheckedChange, disabled, onClick, onMouseEnter, children, ...props },\n    forwardedRef\n  ) => {\n    const itemRef = useRef<HTMLDivElement>(null);\n\n    const composedRefs = useComposedRefs(itemRef, forwardedRef as any);\n\n    const handleClick = (e: MouseEvent) => {\n      if (disabled) return;\n      onCheckedChange?.(!checked);\n      onClick?.(e as any);\n    };\n\n    const handleMouseEnter = (e: MouseEvent) => {\n      if (disabled) return;\n      itemRef.current?.focus();\n      onMouseEnter?.(e as any);\n    };\n\n    return (\n      <div\n        ref={composedRefs}\n        data-slot=\"dropdown-menu-checkbox-item\"\n        data-disabled={disabled ? \"true\" : undefined}\n        role=\"menuitemcheckbox\"\n        aria-checked={checked}\n        tabIndex={disabled ? -1 : 0}\n        className={cn(\n          \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none transition-colors\",\n          \"focus:bg-accent focus:text-accent-foreground\",\n          \"data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n          className,\n          classNative\n        )}\n        onClick={handleClick}\n        onMouseEnter={handleMouseEnter}\n        {...props}\n      >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n          {checked && <Check className=\"h-4 w-4\" />}\n        </span>\n        {children}\n      </div>\n    );\n  }\n);\nDropdownMenuCheckboxItem.displayName = \"DropdownMenuCheckboxItem\";\n\n// DropdownMenuRadioGroup\ntype DropdownMenuRadioGroupContextValue = {\n  value?: string;\n  onValueChange?: (value: string) => void;\n};\n\nconst DropdownMenuRadioGroupContext = createContext<DropdownMenuRadioGroupContextValue | null>(null);\n\nexport type DropdownMenuRadioGroupProps = PropsWithChildren<HTMLAttributes<HTMLDivElement>> & {\n  value?: string;\n  onValueChange?: (value: string) => void;\n};\n\nexport const DropdownMenuRadioGroup = forwardRef<HTMLDivElement, DropdownMenuRadioGroupProps>(\n  ({ className, class: classNative, value, onValueChange, children, ...props }, forwardedRef) => {\n    return (\n      <DropdownMenuRadioGroupContext.Provider value={{ value, onValueChange }}>\n        <div\n          ref={forwardedRef}\n          data-slot=\"dropdown-menu-radio-group\"\n          role=\"group\"\n          className={cn(className, classNative)}\n          {...props}\n        >\n          {children}\n        </div>\n      </DropdownMenuRadioGroupContext.Provider>\n    );\n  }\n);\nDropdownMenuRadioGroup.displayName = \"DropdownMenuRadioGroup\";\n\nfunction useDropdownMenuRadioGroup() {\n  const context = useContext(DropdownMenuRadioGroupContext);\n  if (!context) {\n    throw new Error(\"DropdownMenuRadioItem must be used within DropdownMenuRadioGroup\");\n  }\n  return context;\n}\n\n// DropdownMenuRadioItem\nexport type DropdownMenuRadioItemProps = HTMLAttributes<HTMLDivElement> & {\n  value: string;\n  disabled?: boolean;\n};\n\nexport const DropdownMenuRadioItem = forwardRef<HTMLDivElement, DropdownMenuRadioItemProps>(\n  ({ className, class: classNative, value, disabled, onClick, onMouseEnter, children, ...props }, forwardedRef) => {\n    const { value: groupValue, onValueChange } = useDropdownMenuRadioGroup();\n    const isSelected = groupValue === value;\n    const itemRef = useRef<HTMLDivElement>(null);\n\n    const composedRefs = useComposedRefs(itemRef, forwardedRef as any);\n\n    const handleClick = (e: MouseEvent) => {\n      if (disabled) return;\n      onValueChange?.(value);\n      onClick?.(e as any);\n    };\n\n    const handleMouseEnter = (e: MouseEvent) => {\n      if (disabled) return;\n      itemRef.current?.focus();\n      onMouseEnter?.(e as any);\n    };\n\n    return (\n      <div\n        ref={composedRefs}\n        data-slot=\"dropdown-menu-radio-item\"\n        data-disabled={disabled ? \"true\" : undefined}\n        role=\"menuitemradio\"\n        aria-checked={isSelected}\n        tabIndex={disabled ? -1 : 0}\n        className={cn(\n          \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pr-2 pl-8 text-sm outline-none transition-colors\",\n          \"focus:bg-accent focus:text-accent-foreground\",\n          \"data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n          className,\n          classNative\n        )}\n        onClick={handleClick}\n        onMouseEnter={handleMouseEnter}\n        {...props}\n      >\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n          {isSelected && <Circle className=\"h-2 w-2 fill-current\" />}\n        </span>\n        {children}\n      </div>\n    );\n  }\n);\nDropdownMenuRadioItem.displayName = \"DropdownMenuRadioItem\";\n\n// DropdownMenuLabel\nexport type DropdownMenuLabelProps = HTMLAttributes<HTMLDivElement> & {\n  inset?: boolean;\n};\n\nexport const DropdownMenuLabel = forwardRef<HTMLDivElement, DropdownMenuLabelProps>(\n  ({ className, class: classNative, inset, ...props }, forwardedRef) => {\n    return (\n      <div\n        ref={forwardedRef}\n        data-slot=\"dropdown-menu-label\"\n        className={cn(\"px-2 py-1.5 font-semibold text-sm\", inset && \"pl-8\", className, classNative)}\n        {...props}\n      />\n    );\n  }\n);\nDropdownMenuLabel.displayName = \"DropdownMenuLabel\";\n\n// DropdownMenuSeparator\nexport type DropdownMenuSeparatorProps = HTMLAttributes<HTMLDivElement>;\n\nexport const DropdownMenuSeparator = forwardRef<HTMLDivElement, DropdownMenuSeparatorProps>(\n  ({ className, class: classNative, ...props }, forwardedRef) => {\n    return (\n      <div\n        ref={forwardedRef}\n        data-slot=\"dropdown-menu-separator\"\n        role=\"presentation\"\n        aria-orientation=\"horizontal\"\n        className={cn(\"-mx-1 my-1 h-px bg-muted\", className, classNative)}\n        {...props}\n      />\n    );\n  }\n);\nDropdownMenuSeparator.displayName = \"DropdownMenuSeparator\";\n\n// DropdownMenuShortcut\nexport type DropdownMenuShortcutProps = HTMLAttributes<HTMLSpanElement>;\n\nexport const DropdownMenuShortcut = ({ className, class: classNative, ...props }: DropdownMenuShortcutProps) => {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className, classNative)}\n      {...props}\n    />\n  );\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\n// DropdownMenuGroup\nexport type DropdownMenuGroupProps = PropsWithChildren<HTMLAttributes<HTMLDivElement>>;\n\nexport const DropdownMenuGroup = forwardRef<HTMLDivElement, DropdownMenuGroupProps>(\n  ({ className, class: classNative, ...props }, forwardedRef) => {\n    return (\n      <div\n        ref={forwardedRef}\n        data-slot=\"dropdown-menu-group\"\n        role=\"group\"\n        className={cn(className, classNative)}\n        {...props}\n      />\n    );\n  }\n);\nDropdownMenuGroup.displayName = \"DropdownMenuGroup\";\n"
    }
  ],
  "category": "ui"
}
