{
  "name": "toggle",
  "type": "registry:ui",
  "description": "A two-state button that can be either on or off.",
  "dependencies": [
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://shadcn-preact.regarde.dev/cn.json",
    "https://shadcn-preact.regarde.dev/useControlledState.json"
  ],
  "files": [
    {
      "path": "toggle.tsx",
      "type": "registry:ui",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\nimport type { ButtonHTMLAttributes } from \"preact\";\nimport { forwardRef } from \"preact/compat\";\nimport { cn } from \"./share/cn\";\nimport { useControlledState } from \"./share/useControlledState\";\n\nexport const toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors md:hover:bg-muted md:hover:text-muted-foreground md:focus-visible:outline-hidden md:focus-visible:ring-1 md:focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border border-input bg-transparent shadow-xs md:hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport type ToggleProps = ButtonHTMLAttributes<HTMLButtonElement> &\n  VariantProps<typeof toggleVariants> & {\n    pressed?: boolean;\n    defaultPressed?: boolean;\n    onPressedChange?(pressed: boolean): void;\n  };\n\nexport const Toggle = forwardRef<HTMLButtonElement, ToggleProps>(\n  ({ className, class: classNative, variant, size, ...props }, ref) => {\n    const [isOn, setIsOn] = useControlledState({\n      defaultValue: Boolean(props.defaultPressed),\n      controlledValue: props.pressed,\n      onChange: props.onPressedChange,\n    });\n\n    return (\n      <button\n        ref={ref}\n        data-state={isOn ? \"on\" : \"off\"}\n        className={cn(toggleVariants({ variant, size, className }), classNative)}\n        {...props}\n        onClick={() => setIsOn(!isOn)}\n      />\n    );\n  }\n);\nToggle.displayName = \"Toggle\";\n"
    }
  ],
  "category": "ui"
}
