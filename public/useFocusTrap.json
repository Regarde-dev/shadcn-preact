{
  "name": "useFocusTrap",
  "type": "registry:lib",
  "description": "Hook for focus trapping",
  "files": [
    {
      "path": "share/useFocusTrap.tsx",
      "type": "registry:lib",
      "content": "import { type RefObject, useEffect } from \"preact/compat\";\n\nexport interface UseFocusTrapOptions {\n  enabled?: boolean;\n  initialFocus?: \"first\" | \"last\" | RefObject<HTMLElement>;\n  restoreFocus?: boolean;\n}\n\nconst FOCUSABLE_SELECTOR = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n\n/**\n * Hook to trap focus within a container (for modals/dialogs)\n * @param containerRef - Ref to the container element\n * @param options - Configuration options\n */\nexport function useFocusTrap(containerRef: RefObject<HTMLElement>, options: UseFocusTrapOptions = {}) {\n  const { enabled = true, initialFocus = \"first\", restoreFocus = true } = options;\n\n  useEffect(() => {\n    if (!enabled || !containerRef.current) return;\n\n    const previouslyFocused = document.activeElement as HTMLElement;\n\n    // Set initial focus\n    const focusableElements = containerRef.current.querySelectorAll<HTMLElement>(FOCUSABLE_SELECTOR);\n    if (focusableElements.length > 0) {\n      if (initialFocus === \"first\") {\n        focusableElements[0]?.focus();\n      } else if (initialFocus === \"last\") {\n        focusableElements[focusableElements.length - 1]?.focus();\n      } else if (initialFocus && \"current\" in initialFocus) {\n        initialFocus.current?.focus();\n      }\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== \"Tab\" || !containerRef.current) return;\n\n      const focusableElements = containerRef.current.querySelectorAll<HTMLElement>(FOCUSABLE_SELECTOR);\n      const firstElement = focusableElements[0];\n      const lastElement = focusableElements[focusableElements.length - 1];\n\n      if (!firstElement || !lastElement) return;\n\n      if (e.shiftKey) {\n        // Shift + Tab\n        if (document.activeElement === firstElement) {\n          e.preventDefault();\n          lastElement.focus();\n        }\n      } else {\n        // Tab\n        if (document.activeElement === lastElement) {\n          e.preventDefault();\n          firstElement.focus();\n        }\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      if (restoreFocus && previouslyFocused) {\n        previouslyFocused.focus();\n      }\n    };\n  }, [enabled, containerRef, initialFocus, restoreFocus]);\n}\n"
    }
  ],
  "category": "lib"
}